{
  "language": "Solidity",
  "sources": {
    "contracts/VoteBlock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ncontract VoteBlock {\r\n    struct Candidate {\r\n        string name;\r\n        string party;\r\n        uint voteCount;\r\n    }\r\n\r\n    struct Voter {\r\n        bool hasVoted;\r\n    }\r\n\r\n    address public admin;\r\n    mapping(string => Voter) public voters;\r\n    Candidate[] public candidates;\r\n\r\n    event CandidateAdded(string name, string party);\r\n    event VoteCasted(string userId);\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function addCandidate(string memory _name, string memory _party) public onlyAdmin {\r\n        candidates.push(Candidate(_name, _party, 0));\r\n        emit CandidateAdded(_name, _party);\r\n    }\r\n\r\n    function vote(string memory _userId, string memory _name) public {\r\n        require(!voters[_userId].hasVoted, \"Already voted!\");\r\n\r\n        voters[_userId].hasVoted = true;\r\n\r\n        for(uint i = 0; i < candidates.length; i++)\r\n        {\r\n            if(keccak256(abi.encodePacked(candidates[i].name)) == keccak256(abi.encodePacked(_name)))\r\n            {\r\n                candidates[i].voteCount++;\r\n            }\r\n        }\r\n        \r\n\r\n        emit VoteCasted(_userId);\r\n    }\r\n\r\n    function getCandidates() public view returns (Candidate[] memory) {\r\n        return candidates;\r\n    }\r\n\r\n    function getCandidateVotes(uint _candidateIndex) public view returns (uint) {\r\n        require(_candidateIndex < candidates.length, \"Invalid candidate!\");\r\n        return candidates[_candidateIndex].voteCount;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}